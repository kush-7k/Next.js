REACT SERVER COMPONENTS (RSC)
 This architetcture provides a new way of creating react components , by spiltting them into two types
 -> Server components
 -> Client components

  Server components
  By Default,
  All components are server components IN NEXT.js
  They can read files or fetch data from database
  They do not have ability to use hooks or hndle user intercations

  Client components
  To create a client components, we need to write "use client" at the top of the component files
  They can use hooks and handle user intercations.

ROUTING
 
  It has file based routing mechanism
  ALl routes must be placed in app folder
  Every file that corresponds to a route must be named as page.js or page.tsx
  Each folder corresponds to path segments in the URL
  There are many stages of routing
   > localhost/home
   > localhost/about, and many mroe
   > localhost/blog/first,second (This is known as nested routes)
   > localhost/products/id  (On going to products, then there can be prod1,2,3 and clicking on each leads to 1,2,3 details) 
   > localhost/products/id/reviews/id (This is nested dynamic routing)
   > This is known as catch all segments
    localhost/docs/feature1/concept1
    localhost/docs/feature1/concept2

  HOW TO DEFINE CUSTOM NOT FOUND PAGE
   To create this we need to create a file called not-found.tsx  

PRIVATE FOLDERS
 > This folders indicates that it is a private implementation detail and should not be
   considered by routing system.
 > The private folders and it's subfolders are excluded from routing.
 > In order to create private folder, we need to add an underscore as prefix for the folder name.
 USES
 > For seperating the UI logic from routing logic.
 > For consistently organizing the internal files across a project.
 > For sorting and grouping files in code editors.
 > For avoiding potentional naming conflicts with future Next.js file conventions.

 (*) IF YOU WANT TO INCLUDE AN UNDERSCORE IN URL SEGMENTS, YOU CAN PREFIX THE FOLDER NAME with
 "%5F", WHICH IS THE URL-ENCODED FORM OF AN UNDERSCORE.

ROUTE GROUPS
 > Allow us to logically group our routes and project files without affecting the URL path structure

 What is the use of ()
 This is generally useful to avoid the route of that particular folder for example we have (auth) in the ()
 therefore localhost/auth/login becomes localhost/login

LAYOUTS
 A layout is a UI that is shared between multiple pages.
 We can also create nested layout.
 Route group layout as well.

ROUTING METADATA
 This ensures proper SEO is crucial for increasing visibility and attracting users.
 Next.js introduced the MetaData API which allows you to define metdata for each page.
 Metadata ensures accurate and relevant information us displayed when pages are shared.

CONFIGURING METADATA
 Export a static metadata object
 Export a dynamic generate Metadata function

METADATA rules
 Both layout.tsx and page.tsx files can export metadata. 

TITLE METADATA
 It's primary funciton is to define the document TITLE
 It can be either string or an object

NAVIGATION
 Users rely on an UI element to navigate through different sites. This is known as UI navigation.
 We can use Link component.
 ACTIVE Link
 This enhance the user experience by styling active links
 ->Navigating programatically is helpful when someone is filling the form and after submitting it, gets redirected to confirmation
 page.

loading.tsx
 This file allows us ti create loaading states that are displayed to users while a specific route segment's
 content is loading.
 Benefits
 -> You can display loading state as soon as user navigates to new route
 -> Next.js allows the creation of shared kayouts that remain interactive while new route segment are loading.

error.tsx
It helps to make sures that the error created in a particular area is only affected inetead of whole website

Error Handling through nested routes 
  -> errors bubble upto the closest parent error boundary
  -> An error.tsx file will cater to errors for all its nested child SEGMENTS
  -> By positioning error.tsx file into the different levels in the nested folders of a route, you can achieve a more 
  granular level pf error handling.
  -> The placement of the error.tsx plays more important role and place accordingly to the measuring the error handling